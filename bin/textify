#!/usr/bin/env node

var argv = require('optimist')
			.usage('Textify text')
			.alias('x', 'tobinary')
			.string('tobinary')
			.string('x')
			.describe('x', 'convert to binary')
			.alias('w', 'wrap')
			.describe('w', 'wrap number')
			.alias('z', 'frombinary')
			.string('frombinary')
			.string('z')
			.describe('z', 'convert from binary')
			.alias('t', 'texturize')
			.string('t')
			.string('texturize')
			.describe('t', 'Texturize the text')
			.alias('r', 'rot13')
			.string('r')
			.string('rot13')
			.describe('r', 'rot13 the text')
			.alias('o', 'rot')
			.string('o')
			.string('rot')
			.describe('o', 'rot the text')
			.alias('n', 'num')
			.describe('n', 'number input')
			.alias('q', 'toleet')
			.string('q')
			.string('toleet')
			.describe('q', 'to leet text')
			.alias('y', 'fromleet')
			.string('y')
			.string('fromleet')
			.describe('y', 'from leet text')
			.argv;
			
var textify = require('../lib/textify');

if (argv.tobinary) {
	console.log(textify.toBinary(argv.tobinary, argv.wrap ? argv.wrap : 0));
}
if (argv.frombinary) {
	console.log(textify.fromBinary(argv.frombinary));
}
if (argv.texturize) {
	console.log(textify.texturize(argv.texturize));
}
if (argv.rot13) {
	console.log(textify.rot13(argv.rot13));
}
if (argv.rot && argv.num) {
	console.log(textify.rot(argv.rot, argv.num));
}
if (argv.toleet) {
	console.log(textify.toLeet(argv.toleet));
}
if (argv.fromleet) {
	console.log(textify.fromLeet(argv.fromleet));
}